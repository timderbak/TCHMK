# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BigInt', [dirname(__file__)])
        except ImportError:
            import _BigInt
            return _BigInt
        if fp is not None:
            try:
                _mod = imp.load_module('_BigInt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BigInt = swig_import_helper()
    del swig_import_helper
else:
    import _BigInt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


max_len = _BigInt.max_len
osn = _BigInt.osn
len1 = _BigInt.len1
class BigInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["amount"] = _BigInt.BigInt_amount_set
    __swig_getmethods__["amount"] = _BigInt.BigInt_amount_get
    if _newclass:amount = _swig_property(_BigInt.BigInt_amount_get, _BigInt.BigInt_amount_set)
    __swig_setmethods__["digits"] = _BigInt.BigInt_digits_set
    __swig_getmethods__["digits"] = _BigInt.BigInt_digits_get
    if _newclass:digits = _swig_property(_BigInt.BigInt_digits_get, _BigInt.BigInt_digits_set)
    __swig_setmethods__["sign"] = _BigInt.BigInt_sign_set
    __swig_getmethods__["sign"] = _BigInt.BigInt_sign_get
    if _newclass:sign = _swig_property(_BigInt.BigInt_sign_get, _BigInt.BigInt_sign_set)
    def __init__(self): 
        this = _BigInt.new_BigInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BigInt.delete_BigInt
    __del__ = lambda self : None;
    def input(self, *args): return _BigInt.BigInt_input(self, *args)
    def output(self, *args): return _BigInt.BigInt_output(self, *args)
    def LevelUp(self): return _BigInt.BigInt_LevelUp(self)
    def __eq__(self, *args): return _BigInt.BigInt___eq__(self, *args)
    def __ne__(self, *args): return _BigInt.BigInt___ne__(self, *args)
    def __gt__(self, *args): return _BigInt.BigInt___gt__(self, *args)
    def __lt__(self, *args): return _BigInt.BigInt___lt__(self, *args)
    def __le__(self, *args): return _BigInt.BigInt___le__(self, *args)
    def __ge__(self, *args): return _BigInt.BigInt___ge__(self, *args)
    def __add__(self, *args): return _BigInt.BigInt___add__(self, *args)
    def __sub__(self, *args): return _BigInt.BigInt___sub__(self, *args)
    def __mul__(self, *args): return _BigInt.BigInt___mul__(self, *args)
    def __div__(self, *args): return _BigInt.BigInt___div__(self, *args)
    def __mod__(self, *args): return _BigInt.BigInt___mod__(self, *args)
BigInt_swigregister = _BigInt.BigInt_swigregister
BigInt_swigregister(BigInt)


def binpow(*args):
  return _BigInt.binpow(*args)
binpow = _BigInt.binpow
# This file is compatible with both classic and new-style classes.


